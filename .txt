In order to allow users to perform some actual actions in Next.js apps, the React Server Components Architecture gives us something called Server Actions.
So, let's now quickly learn what Server Actions are, how they work, and how we use them in practice.
So, from the very start, one of our goals in using Next.js has been to easily build Interactive Full-Stack Applications with React.
And to help developers do that, the React team gave us the React Server Components Architecture.
So, the one that we've been studying throughout this whole part of the course.
So, up until this point, we've been doing all Data Fetching in our application using Server Components.
That's exactly what they were made for, and they are of course the most fundamental part of the RSC Architecture.
However, Fetching Data is not all that we want our application to do.
We also, want applications to be interactive, so, we want them to be able to handle user input.
So, to do something as a result of users interacting with the app.
So, far, all our application does is to Fetch Data from a database and render that data using different strategies.
But now we actually want a way for users to interact with that data, so, to create new data or to update or change existing data.
And so, those kind of operations is what we call Mutations.
In the React Server Components Architecture for Mutations, we have Server Actions.
So, within that RSC Architecture, Server Actions really are the missing piece that unlocks building Interactive Full-stack Applications.
Again, because just Fetching Data is not enough, the user needs a way to create new data, update data, and delete data.
And therefore, Server Actions are the second missing part of the React Server Components paradigm.
So, Server Actions complement Server Components in order to enable us to build Full-Stack apps all within React, tightly integrated with some new React Hooks and Features.
Now, the idea behind Server Actions is really simple.
They're just asynchronous functions that run exclusively on the server.
They are very easily created just by adding the new Use Server Directive, either to the top of a function in a Server Component or to the top of a standalone file from which we can then export multiple Server Actions.
So, these are the two options for defining or creating Server Actions.
And so, let's discuss them a bit further.
First, Server Actions can be defined right inside a Server Component, where they can then be used directly or passed as a prop to a Client Component.
And remember how usually we cannot pass functions as props to Client Components.
But Server Actions are actually an exception to that rule.
So, Server Actions can flow from the server to the client and be used there.
But again, they can also, just be invoked right in the Server Component in which they are created.
The second place in which Server Actions can be created, is in a dedicated Server Action Module, which needs to start with the Use Server Directive.
Then all functions that we export from that file simply become Server Actions, which can then be imported into any Server or even Client Component.
And this is actually the recommended way which we'll be using most of the time, because this way all the Mutations are stored in one central place.
It can also, be multiple files, but it's common to have just one, unless you have like a huge application.
Now, right, so, with Use Server, we now have yet another new directive, and so, let's understand it a bit better and compare it to the Use Client Directive.
So, first of all, it's important to understand that Use Server is really only for Server Actions, not for Server Components.
So, remember, Server Components are the default component and don't require any directive.
So, don't make that beginner mistake of using Use Server for a Server Component.
But anyway, to recap what the Use Client Directive is for, let's say that we're on the server now, in a Server Component.
The Use Client Directive is then like a bridge that allows our code to cross from the server to the client.
This is similar to including a script URL with the script tag in an HTML file that is sent to the browser.
Now, on the other hand, the Use Server Directive is simply the other way around.
So, it bridges the gap from client to server, basically allowing the client to talk to the server.
So, in a sense, it's like an API endpoint, which allows frontend applications to do exactly that, so, to talk from the client to the server.
And so, it's in those cases, where essentially we need an API endpoint that the Use Server Directive is needed.
Again, not in Server Components, because these don't bridge anything, they are already on the server anyway.
So, these directives being like a bridge over the gaps between server and client in these both directions, is I think, a great way of understanding what these two directives are and why they are needed.
Now speaking of API endpoints, that's actually exactly what Server Actions are.
So, behind the scenes, the way Server Actions work, is that Next.js will automatically create an API endpoint for each Server Action that we create.
So, each Server Action basically gets its own URL, which is sent to the client.
So, it's important to note that the function itself never reaches the client, only the URL.
This means that the code itself will always stay on the server and therefore, in Server Actions, it's safe to directly connect to databases, use secret API keys and so, on.
Again, because it's impossible that the code is leaked to the browser.
Now whenever a Server Action is invoked, so, when it's called as a result of a user interaction, behind the scenes, a POST request will be made to the endpoint and all inputs that are sent along the request will be serialized.
But as developers, we never see or use an API endpoint or a URL.
It's all abstracted away in the Server Action.
So, all we see and use is the function itself, which looks just like any other regular function.
So, we don't need to deal with the API that Next.js creates behind the scenes.
And it feels really quite magical when we do this in practice.
All right, so, in summary, now that we know how they work, we can just think of Server Actions as automatically created API endpoints.
So, the big benefit of Server Actions is that we no longer need to create a separate API or Next.js route handlers in order to mutate data.
Instead, we just use this amazing new feature that's part of the RSC Architecture, so, developed by the React team.
Now, the way in which Server Actions work implies that Server Actions actually do require a running web server.
So, unlike Server Components, which could in theory run on build time.
But Server Actions do not work on build time because without a live web server, there would be no API endpoints to be called and to be executed as a response to users interacting with the application.
Okay, now, Server Actions are typically used to handle form submissions, meaning that we can use the Server Action as an action attribute of a regular form element no matter if that form is placed in a Server or a Client Component.
And this interaction between forms and Server Actions is one of the special things about Server Actions.
They just make forms work without any additional code on the frontend.
And again, it doesn't even matter if that form is a Server Component or a Client Component.
It will just work like magic.
So, forms will simply automatically take all the form data and send it to the Server Action in a serialized form using the provided API endpoint behind the scenes.
And the Server Action can then respond if we want, and we can handle that response as we'll see later.
Now, besides forms, Server Actions can also, be called just like regular functions in event handlers and useEffects.
This of course, only works on the client, as only Client Components are interactive.
Now, in terms of what we actually do in Server Actions, as we already learned, their goal is mostly to perform data mutations.
So, creating, updating and deleting data, just like when we built our own API.
Now, when the underlying data of our page changes, the UI must update as a result, right? However, since that data is not stored as state on the client, we do not update the UI by updating state.
Instead, what we need to do is to manually revalidate the data cache whenever we perform a data mutation.
So, Server Actions are tightly integrated into the Next.js caching and revalidation system.
And so, we can easily revalidate the cache on demand with revalidatePath and revalidateTag, just as we talked about in the Caching Lecture.
So, this is extremely important stuff, but I won't go into detail here, because we already talked about this earlier, and it's also, easier to understand with code.
But anyway, in Server Actions, we can also, work with cookies and really run any other code that we want here, as long as it's relevant to the action that we're performing.
But no matter what we do, we always need to keep in mind that this code is effectively running on our backend, and therefore, we need to make sure that the user is authorized to perform the action, and we need to assume that inputs are unsafe.
So, just like we do in regular backend development.
Now, okay, but enough talking, let's experiment with this in practice.
 